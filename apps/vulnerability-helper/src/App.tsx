import Backdrop from "@mui/material/Backdrop";
import { useMouseClick } from "./hooks/useMouseClick";

import "./App.css";
import { styled, useTheme } from "@mui/material/styles";
import Tooltip, { TooltipProps, tooltipClasses } from "@mui/material/Tooltip";
import { Fragment } from "react/jsx-runtime";
import Typography from "@mui/material/Typography";
import { useEffect, useState } from "react";
import sanitizeHtml from "./utils/sanitise-html";
import { useGenerativeHelp } from "./hooks/useGenerativeHelp";
import { CircularProgress, Skeleton } from "@mui/material";
import { motion } from "framer-motion";
import Grow from "@mui/material/Grow";
import Fade from "@mui/material/Fade";

const HtmlTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} arrow classes={{ popper: className }} />
))(({ theme }) => ({
  [`& .${tooltipClasses.arrow}`]: {
    color: theme.palette.common.black,
    left: 8,
    display: "none",
  },
  [`& .${tooltipClasses.tooltip}`]: {
    backgroundColor: theme.palette.primary.main,
    width: 300,
    fontSize: 14,
    borderRadius: "0 16px 16px 16px",
    marginLeft: 8,
    padding: 16,
    boxShadow: "rgba(0, 0, 0, 0.24) 0px 3px 8px",
  },
}));

function App() {
  const {
    showToolTip,
    targetElement,
    reset: resetMouseClick,
    selectedText,
  } = useMouseClick();
  const theme = useTheme();
  const {
    isThinking,
    result,
    getHelp,
    reset: resetGenerativeHelp,
  } = useGenerativeHelp();

  const [showDetails, setShowDetails] = useState(false);

  // useEffect(() => {
  //   if (showToolTip) {
  //     getHelp(
  //       targetElement?.innerHTML || "",
  //       sanitizeHtml(document.body.innerHTML)
  //     );
  //   }
  // }, [showToolTip]);

  if (showToolTip) {
    return (
      <Backdrop
        onClick={() => {
          resetMouseClick();
          resetGenerativeHelp();
          setShowDetails(false);
        }}
        open={true}
        sx={() => ({ zIndex: 999999999 })}
      >
        <div onClick={(e) => e.stopPropagation()}>
          <HtmlTooltip
            open={true}
            title={
              <Fragment>
                {isThinking && (
                  <>
                    <Typography variant="body1">
                      {`It looks like you need some help on "${selectedText.text}", I am here to help`}
                    </Typography>
                    <br />
                    <Skeleton variant="rounded" width={280} height={16} />
                    <br />
                    <Skeleton variant="rounded" width={200} height={16} />
                    <br />
                    <Skeleton variant="rounded" width={260} height={16} />
                  </>
                )}
                <Fade
                  in={!isThinking && !!result}
                  timeout={600}
                >
                  <Typography variant="body1">{result}</Typography>
                </Fade>
              </Fragment>
            }
            sx={{ zIndex: 9999999999 }}
            TransitionComponent={Grow}
            TransitionProps={{
              in: showDetails,
              timeout: 300,
            }}
          >
            {/* <div
              style={{
                position: "absolute",
                minWidth: targetElement?.getBoundingClientRect().width,
                height: targetElement?.getBoundingClientRect().height,
                left: targetElement?.getBoundingClientRect().left,
                top: targetElement?.getBoundingClientRect().top,
                background: theme.palette.common.white,
                color: "rgba(0, 0, 0, 0.87)",
                boxShadow: theme.shadows[1],
                fontSize: 16,
                fontWeight: 700,
                borderRadius: 4,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
              onClick={(e) => e.stopPropagation()}
            > */}
            <motion.div
              className="help-panel"
              style={{
                left: targetElement?.getBoundingClientRect().left,
                top: targetElement?.getBoundingClientRect().top,
              }}
              initial={{
                opacity: 0,
                scale: 0,
              }}
              animate={{
                opacity: 1,
                scale: 1,
              }}
              // transition={{
              //   duration: 0.6,
              //   ease: "easeInOut",
              //   // times: [0, 0.2, 0.5, 0.8],
              // }}
              onAnimationComplete={() => {
                getHelp(
                  targetElement?.innerHTML || "",
                  sanitizeHtml(document.body.innerHTML)
                );
                setShowDetails(true);
              }}

              // animate={{ opacity: 1, scale: 1, width: "50vw" }}
            >
              <Typography variant="h6">"{selectedText.text}"</Typography>
              {/* {result && <p>{result}</p>} */}
            </motion.div>
          </HtmlTooltip>
        </div>
        {/* </div> */}
      </Backdrop>
    );
  }

  return <></>;
}

export default App;
