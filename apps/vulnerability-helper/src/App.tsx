import Backdrop from "@mui/material/Backdrop";
import { useMouseClick } from "./hooks/useMouseClick";

import "./App.css";
import { styled, useTheme } from "@mui/material/styles";
import Tooltip, { TooltipProps, tooltipClasses } from "@mui/material/Tooltip";
import { Fragment } from "react/jsx-runtime";
import Typography from "@mui/material/Typography";
import { useEffect } from "react";
import sanitizeHtml from "./utils/sanitise-html";
import { useGenerativeHelp } from "./hooks/useGenerativeHelp";
import { CircularProgress } from "@mui/material";

const HtmlTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} arrow classes={{ popper: className }} />
))(({ theme }) => ({
  [`& .${tooltipClasses.arrow}`]: {
    color: theme.palette.common.black,
  },
  [`& .${tooltipClasses.tooltip}`]: {
    backgroundColor: theme.palette.common.black,
    maxWidth: 280,
    fontSize: 14,
    borderRadius: 8,
  },
}));

function App() {
  const { showToolTip, targetElement, reset } = useMouseClick();
  const theme = useTheme();
  const { isThinking, result, getHelp } = useGenerativeHelp();

  useEffect(() => {
    if (showToolTip) {
      getHelp(
        targetElement?.innerHTML || "",
        sanitizeHtml(document.body.innerHTML)
      );
    }
  }, [showToolTip]);

  if (showToolTip) {
    return (
      <Backdrop onClick={reset} open={true} sx={() => ({ zIndex: 999999999 })}>
        <div onClick={(e) => e.stopPropagation()}>
          <HtmlTooltip
            open={true}
            title={
              <Fragment>
                {isThinking && <CircularProgress />}
                {result && (
                  <>
                    <Typography color="inherit">{result}</Typography>
                  </>
                )}
              </Fragment>
            }
            sx={{ zIndex: 9999999999 }}
          >
            <div
              style={{
                position: "absolute",
                minWidth: targetElement?.getBoundingClientRect().width,
                height: targetElement?.getBoundingClientRect().height,
                left: targetElement?.getBoundingClientRect().left,
                top: targetElement?.getBoundingClientRect().top,
                background: theme.palette.common.white,
                color: "rgba(0, 0, 0, 0.87)",
                boxShadow: theme.shadows[1],
                fontSize: 16,
                fontWeight: 700,
                borderRadius: 4,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
              onClick={(e) => e.stopPropagation()}
            >
              <div
                dangerouslySetInnerHTML={{
                  __html: targetElement?.innerHTML || "",
                }}
              ></div>
            </div>
          </HtmlTooltip>
        </div>
      </Backdrop>
    );
  }

  return <></>;
}

export default App;
