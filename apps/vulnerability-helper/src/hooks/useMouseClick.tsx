import { useEffect, useState } from "react";

type SelectedText = {
  text: string;
  counter: number;
};

const selectedText: SelectedText = {
  text: "",
  counter: 0,
};

export const useMouseClick = () => {
  // const getToppestLevelParent = (node: HTMLElement, level: number = 0) => {
  //   const maxLevel = 3;
  //   const parentElement = node.parentElement;
  //   if (!!parentElement && level < maxLevel) {
  //     return parentElement;
  //   }
  //   return node;
  // };

  const [showToolTip, setShowToolTip] = useState<boolean>(false);
  const [targetElement, setTargetElement] = useState<Element | null>(null);

  const handleMouseClick = (e: MouseEvent) => {
    // const target = e.target as HTMLElement;
    let selection: Selection | null = null;
    if (window.getSelection) {
      selection = window.getSelection();
    } else if (document.getSelection()?.type != "Control") {
      selection = document.getSelection();
    }

    if (selection) {
      const hasSelectedSameText = selection.toString() === selectedText.text;
      selectedText.text = selection.toString();
      selectedText.counter = hasSelectedSameText ? selectedText.counter + 1 : 0;
    } else {
      selectedText.text = "";
      selectedText.counter = 0;
    }

    if (selectedText.counter >= 3) {
      console.log("show tooltip now!");
      setShowToolTip(true);
      setTargetElement(document.elementFromPoint(e.clientX, e.clientY));
    }
  };

  useEffect(() => {
    if (showToolTip) {
      document.body.removeEventListener("click", handleMouseClick);
    } else {
      document.body.addEventListener("click", handleMouseClick);
    }
    return () => {
      document.body.removeEventListener("click", handleMouseClick);
    };
  }, [showToolTip]);

  const reset = () => {
    setShowToolTip(false);
    selectedText.text = "";
    selectedText.counter = 0;
  };

  return {
    showToolTip,
    reset,
    targetElement,
  };
};
